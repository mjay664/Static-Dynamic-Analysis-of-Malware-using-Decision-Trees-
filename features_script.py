import os
import re
import numpy as np
import pandas as pd
import pickle
import pandas as pd


valid_section_names = ['text', 'data', 'idata', 'rdata', 'reloc', 'rsrc', 'bss', 'exc', 'crt', 'epcl_ini', 'epcl_con', 'boxld01','epcl_set', 'epcl_tes','tls', 'code', 'wixburn', 'epcl_tex']
features_header = ['Section Count', 'Symbols Count', 'Optional Header Size', 'Charactristics File Header', 
                    'Code Size', 'Initialized Data Size', 'Image Size', 'Header Size', 'Stack Reserve Size', 'Stack Commit Size', 'Heap Reserve Size', 'Heap Commit Size', 'Loader Flags', 'RVA Count', 
                    'ValidName', 'Packed', 'VS1', 'RW1', 'CH1', 'VS2', 'RW2', 'CH2', 'VS3', 'RW3', 'CH3', 'Entropy1', 'Entropy2', 'Entropy3', 
                    'DS1', 'DS2', 'DS3', 'DS4', 'DS5', 'DS6', 'DS7', 'DS8', 'DS9', 'DS10', 'DS11', 'DS12', 'DS13', 'DS14', 'DS15', 'DS16', 
                    'ImportCount', 'Class']


def todecimal(string):
    if '0x' in string:
        return int(string, 0)
    else:
        return float(string)


def imagefileheaderfeatures(s_list):
    ind = 0
    no_sections = 0
    no_symbols = 0
    size_optional_header = 0
    characterstics = 0
    try:
        ind = s_list.index('NumberOfSections:')
        no_sections = todecimal(s_list[ind+1])
        ind = s_list.index('NumberOfSymbols:')
        no_symbols = todecimal(s_list[ind+1])
        ind = s_list.index('SizeOfOptionalHeader:')
        size_optional_header = todecimal(s_list[ind+1])
        ind = s_list.index('Characteristics:')
        characterstics = todecimal(s_list[ind+1]) 

    except:
        if ind == 0:
            return 0, [0, 0, 0, 0]
    
    return ind, [no_sections, no_symbols, size_optional_header, characterstics]


def imageoptionalheaderfeatures(s_list):

    try:
        code_size = todecimal(s_list[s_list.index('SizeOfCode:')+1])
        size_initialized_data = todecimal(s_list[s_list.index('SizeOfInitializedData:')+1])
        size_image = todecimal(s_list[s_list.index('SizeOfImage:')+1])
        size_header = todecimal(s_list[s_list.index('SizeOfHeaders:')+1])
        size_stack_res = todecimal(s_list[s_list.index('SizeOfStackReserve:')+1])
        size_stack_com = todecimal(s_list[s_list.index('SizeOfStackCommit:')+1])
        size_heap_res = todecimal(s_list[s_list.index('SizeOfHeapReserve:')+1])
        size_heap_com = todecimal(s_list[s_list.index('SizeOfHeapCommit:')+1])
        loader_flags = todecimal(s_list[s_list.index('LoaderFlags:')+1])
        ind = s_list.index('NumberOfRvaAndSizes:')
        no_rvo_sizes = todecimal(s_list[ind+1])

        return ind, [code_size, size_initialized_data, size_image, size_header, size_stack_res, size_stack_com, size_heap_res, size_heap_com, loader_flags, no_rvo_sizes]
    except:
        return 0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]


def pesectionfeatures(s_list, no_sections=1):
    try:
        l = []
        ent = []
        isvalidname = 1
        packer = 0
        for i in range(no_sections):
            name = s_list[s_list.index('Name:')+1]
            if isvalidname != 0:
                if '0x' in name or (name[1:].lower() not in valid_section_names and name.lower() not in valid_section_names):
                    isvalidname = 0
            
            l.append(todecimal(s_list[s_list.index('Misc_VirtualSize:')+1]))
            l.append(todecimal(s_list[s_list.index('SizeOfRawData:')+1]))
            l.append(todecimal(s_list[s_list.index('Characteristics:')+1]))
        
            ind = s_list.index('Entropy:')

            if packer != 1 and 'IMAGE_SCN_MEM_EXECUTE' in s_list[s_list.index('Flags:'): ind] and 'IMAGE_SCN_MEM_WRITE' in s_list[s_list.index('Flags:'): ind]:
                packer = 1

            ent.append(todecimal(s_list[ind+1]))

            s_list = s_list[ind+1:]

        l.append(isvalidname)
        l.append(packer)

        return ind, l, ent

    except:
        return 0, []


def directoryfeatures(s_list):
    try:
        l = []
        ind = s_list.index('----------Directories----------')
        s_list = s_list[ind:]
        for i in range(16):
            try:
                ind = s_list.index('Size:')
            except:
                break
            l.append(todecimal(s_list[ind+1]))
            s_list = s_list[ind+1:]
        return ind, l

    except:
        return 0, []


def importsymbolscount(s_list):
    try:
        count = 0
        while('[IMAGE_IMPORT_DESCRIPTOR]' in s_list):
            count += 1
            s_list = s_list[s_list.index('[IMAGE_IMPORT_DESCRIPTOR]')+1:]
        return count
    except:
        return 0


def saveasexcel(np_arr, name='features'):
    df = pd.DataFrame (np_arr, )

    filepath = name+'.xlsx'

    df.to_excel(filepath, index=False, header=features_header)


def concatfeatures(file1='feature_table_benign', file2='feature_table_malware'):
    feature_table_1 = pickle.load(open(file1, 'rb'))
    feature_table_2 = pickle.load(open(file2, 'rb'))
    feature_table = feature_table_1 + feature_table_2
    features = np.array(feature_table, dtype=float)
    saveasexcel(features)


def extractfeatures(dir, ismalware=1):

    feature_table = []
    unspecified_files = []

    dirs = os.listdir(dir)
    
    for i in dirs:
        feature = []
        count = 0
        try:
            f = open(os.path.join(dir + '\\'+i, 'Structure_Info.txt'), 'r', encoding='latin1')
            string = re.sub(r'\s+', ' ', f.read()).replace(',', '').split(' ')
            
            x , l = imagefileheaderfeatures(string)
            feature += l

            sections = l[0]

            string = string[x:]
            x, l = imageoptionalheaderfeatures(string)
            feature += l

            string = string[x:]
            x, l, ent = pesectionfeatures(string, sections)
            feature += l[-2:]

            if sections >= 3:
                feature += l[:9]
                feature += ent[:3]
            else:
                l.pop()
                l.pop()
                feature += l
                for i in range(3 - sections):
                    feature += [0] + [0] + [0]
                feature += ent
                for i in range(3 - sections):
                    feature += [0.0]

            string = string[x:]
            x, l = directoryfeatures(string)
        
            feature += l
            if len(l) != 16:
                for i in range(16-len(l)):
                    feature += [0]
            count += len(l)
            string = string[x:]
            c = importsymbolscount(string)
            feature += [c]

            feature += [ismalware]

            feature_table.append(feature)
        except:
            unspecified_files.append(i)
            
    return feature_table, unspecified_files


if __name__ == "__main__":
    # tic = time()
    # feature_table_1, _ = extractfeatures('Benign', 0)
    # toc = time()
    # print('Benign: ', toc-tic)
    # pickle.dump(feature_table_1, open('feature_table_benign', 'wb'))
    # feature_table_2 = []
    # x = os.listdir('Malware')
    # tic = time()
    # for i in x:
    #     tmp, _ = extractfeatures(os.path.join('Malware',i), 1)
    #     feature_table_2 += tmp
    # toc = time()
    # print('Malware: ', toc-tic)
    # pickle.dump(feature_table_2, open('feature_table_malware', 'wb'))
    # concatfeatures()

    df = pd.read_excel('features.xlsx')

    df = df.sample(frac=1)

    X = df.drop('Class', axis=1)
    y = df['Class']

    from sklearn.model_selection import train_test_split

    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)

    # from sklearn import tree
    # clf = tree.DecisionTreeClassifier()
    # clf.fit(X_train, y_train)

    clf = pickle.load(open('dt_model_static', 'rb'))

    y_predict = clf.predict(X_test)

    from sklearn.metrics import accuracy_score
    print(accuracy_score(y_test, y_predict))
    from sklearn.metrics import confusion_matrix
    print(confusion_matrix(y_test, y_predict))

    # from sklearn.svm import SVC
    # clf = SVC(C=7, gamma='auto', kernel='rbf')
    # clf.fit(X_train, y_train)

    # from sklearn.neighbors import KNeighborsClassifier
    # clf = KNeighborsClassifier(n_neighbors=3)
    # clf.fit(X_train, y_train)

    from sklearn.ensemble import ExtraTreesClassifier
    clf = ExtraTreesClassifier(n_estimators=100, random_state=0)
    clf.fit(X_train, y_train)

    y_predict = clf.predict(X_test)

    from sklearn.metrics import accuracy_score
    print(accuracy_score(y_test, y_predict))
    from sklearn.metrics import confusion_matrix
    print(confusion_matrix(y_test, y_predict))




